// To keep config clutter down, TF settings are abstracted into a TESTFLIGHT block.
// The syntax is as follows:
// TESTFLIGHT
// {
//		- - - REQUIRED - - -
//
//		name =								- Configuration name. MUST be unique to each part!
//		cycleReliabilityStart =				- Chance of operating without failing at 0 DU
//		cycleReliabilityEnd =				- Chance of operating without failing at max DU
//
//		- - - FAILURE MODES - - -
//
//		ablationFailures = True				- Ablative heat shields, automatically attached.
//		avionicsFailures = True				- Control modules, automatically attached.
//		dockingPortFailures = True			- Docking ports, automatically attached.
//		experimentFailures = True			- Science experiments, automatically attached.
//		fluidTankFailures = True			- Non-solid fuel tanks, automatically attached.
//		lightingFailures = True				- Lights, automatically attached.
//		reactionWheelFailures = True		- Reaction wheels, automatically attached.
//		solarPanelFailures = True			- Solar panels, automatically attached.
//		wheelFailures = True				- Wheels, automatically attached.
//		
//		FARControlSurfaceFailures = True	- (FAR exclusive) FAR's control surfaces, automatically attached
//		RTAntennaFailures = True			- (RemoteTech exclusive) RemoteTech's antennas, automatically attached
//
//		- - - OPTIONAL - - -
//
//		title =								- Part name to use in MFD. Defaults to full VAB name.
//		startDU =							- Minimum DU a part may have (default 0)
//		techTransfer =						- Other parts produce data for this one
//		reliabilityDataRateMultiplier =		- Data collection efficiency (default 1.0)
//		flightDataEngineerModifier =		- Data collection efficiency when engineers are on board  (default 0.25)
//		explicitDataRate = True				- Data rate multiplier recommended for long-duration operations.
//
//		techLevel =							- Mass configuration for large amount of parts. There are 3 available technology levels: Early, Basic and Advanced.
//		techExperience =					- Mass configuration for large amount of parts. Applies a multiplier to techLevel based on 3 levels: Experimental, Prototype and Experienced.
//
//		reliabilityTooling =				- (Procedural Parts exclusive) Sizes in which tanks share the same reliability.
//
//		mainConfiguration =					- Override for configurable parts.
//		reliabilityMidH =					- Midpoint data value.
// }

// TestFlightInterop MUST come after all other TF PartModules (Already processed in Generic.cfg)

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleAblator]]:FOR[zTestFlight] { @TESTFLIGHT { %ablationFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleCommand]]:FOR[zTestFlight] { @TESTFLIGHT { %avionicsFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleDockingNode]]:FOR[zTestFlight] { @TESTFLIGHT { %dockingPortFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleScienceExperiment]]:FOR[zTestFlight] { @TESTFLIGHT { %experimentFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@RESOURCE[*]]:FOR[zTestFlight] { @TESTFLIGHT { %fluidTankFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@RESOURCE[SolidFuel]]:FOR[zTestFlight] { @TESTFLIGHT { !fluidTankFailures = DEL } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleLight]]:FOR[zTestFlight] { @TESTFLIGHT { %lightingFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleReactionWheel]]:FOR[zTestFlight] { @TESTFLIGHT { %reactionWheelFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleDeployableSolarPanels]]:FOR[zTestFlight] { @TESTFLIGHT { %solarPanelFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleWheel*]]:FOR[zTestFlight] { @TESTFLIGHT { %wheelFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[FARControllableSurface]]:FOR[zTestFlight]:NEEDS[FerramAerospaceResearch] { @TESTFLIGHT { %FARControlSurfaceFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleRTAntenna]]:FOR[zTestFlight]:NEEDS[RemoteTech] { @TESTFLIGHT { %RTAntennaFailures = True } }
// Preprocess
@PART[*]:HAS[@TESTFLIGHT,!MODULE[ModuleEngines*]]:FOR[zTestFlight]
{
	@TESTFLIGHT,*
	{
		&name = #$../name$
		&title = #$name$
		temp = #$../name$
		@temp ^= :_:-:
		&startDU = 0

		&mainConfiguration = #kspPartName = $temp$:$name$

		&condition =

		&reliabilityDataRateMultiplier = 1.0
		
		&flightDataEngineerModifier = 0.25

		failChanceStart = 1
		@failChanceStart /= #$cycleReliabilityStart$
		@failChanceStart -= 1
		@failChanceStart /= 2
		@failChanceStart /= 360
		failChanceEnd = 1
		@failChanceEnd /= #$cycleReliabilityEnd$
		@failChanceEnd -= 1
		@failChanceEnd /= 2
		@failChanceEnd /= 360
	}

	@TESTFLIGHT,*:HAS[~explicitDataRate[?rue]]
	{
		@reliabilityDataRateMultiplier *= 800 // data collected per re-entry
		@reliabilityDataRateMultiplier /= 360 // assume 6-minute re-entry
	}

	@TESTFLIGHT:HAS[#techLevel[Early]]
	{
		cycleReliabilityStart = 0.6
		cycleReliabilityEnd = 0.75
	}

	@TESTFLIGHT:HAS[#techLevel[Basic]]
	{
		cycleReliabilityStart = 0.75
		cycleReliabilityEnd = 0.85
	}

	@TESTFLIGHT:HAS[#techLevel[Advanced]]
	{
		cycleReliabilityStart = 0.85
		cycleReliabilityEnd = 0.975
	}

	@TESTFLIGHT:HAS[#techLevel[*],#techExperience[Experimental]]
	{
		@cycleReliabilityStart *= 0.6
		@cycleReliabilityEnd = *= 0.6
	}

	@TESTFLIGHT:HAS[#techLevel[*],#techExperience[Prototype]]
	{
		@cycleReliabilityStart *= 0.8
		@cycleReliabilityEnd = *= 0.8
	}

	@TESTFLIGHT:HAS[#techLevel[*],#techExperience[Experienced]]
	{
		key1 = #$cycleReliabilityStart$
		@cycleReliabilityStart *= 1.4
		@cycleReliabilityEnd = *= 1.4
		@cycleReliabilityStart /= 1
	}
}

//------------------------------------------------------------------
// Create the nodes.
@PART[*]:HAS[@TESTFLIGHT,!MODULE[ModuleEngines*]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightCore
		title = #$../TESTFLIGHT,0/title$
		configuration = #$../TESTFLIGHT,0/mainConfiguration$
		maxData = 10000

		startFlightData = #$../TESTFLIGHT,0/startDU$
		techTransfer = #$../TESTFLIGHT,0/techTransfer$
		// Most part series have only 2-3 parts
		techTransferGenerationPenalty = 0.5

		// R&D parameters will be handled later
	}

	MODULE
	{
		name = TestFlightReliability
		configuration = #$../TESTFLIGHT,0/name$
		reliabilityCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../../TESTFLIGHT,0/failChanceStart$

			// Calculate kink time
			key20 = #$../../TESTFLIGHT,0/kinkH$
			@key20 *= 5000
			@key20 += 1000

			// Calculate kink value
			key21 = #$../../TESTFLIGHT,0/failChanceEnd$
			@key21 -= #$../../TESTFLIGHT,0/failChanceStart$
			@key21 *= 0.75
			@key21 += #$../../TESTFLIGHT,0/failChanceStart$

			// Calculate kink tangent
			key22 = #$../../TESTFLIGHT,0/failChanceEnd$
			@key22 -= #$../../TESTFLIGHT,0/failChanceStart$
			@key22 *= 0.0001
			@key22 *= 0.5
			// now average it with the linear tangent to the endpoint
			key221 = #$../../TESTFLIGHT,0/failChanceEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = 0.5
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$

			// Create end key
			key30 = 10000
			key31 = #$../../TESTFLIGHT,0/failChanceEnd$
			key32 = 0 // flat intangent

			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$

			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
			!key221 = DEL
			!key222 = DEL
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#ablationFailures]]:FOR[zTestFlight]
{
	MODULE
	{
		name = FlightDataRecorder_HeatShield
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$
			flightDataMultiplier = #$/TESTFLIGHT,0/reliabilityDataRateMultiplier$
			flightDataEngineerModifier = #$/TESTFLIGHT,0/reliabilityDataEngineerModifier$
        }
	}

	MODULE
	{
		name = TestFlightFailure_AblatorCover
		configVersion = 2
		
		CONFIG
		{
			configuration = #$../TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = False
				canBeRepairedByRemote = False
				repairChance = 100
			}
			duFail = 100
			duRepair = 250
			failureTitle = Cracked Heat Shield
			severity = minor
			weight = 8
			failureType = mechanical
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#avionicsFailures]]:FOR[zTestFlight]
{
	MODULE
	{
		name = FlightDataRecorder
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$
			flightDataMultiplier = #$/TESTFLIGHT,0/reliabilityDataRateMultiplier$
			flightDataEngineerModifier = #$/TESTFLIGHT,0/reliabilityDataEngineerModifier$
        }
	}
	
	MODULE
	{
		name = TestFlightFailure_AvionicsAxis
		configVersion = 2
		
		CONFIG
		{
			configuration = #$../TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = True
				repairChance = 100
			}
			duFail = 100
			duRepair = 250
			failureTitle = Uncontrollable Axis
			severity = minor
			weight = 8
			failureType = software
		}
	}
	
	MODULE
	{
		name = TestFlightFailure_AvionicsClamp
		configVersion = 2
		
		CONFIG
		{
			configuration = #$../TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = False
				canBeRepairedByRemote = False
				repairChance = 100
			}
			duFail = 100
			duRepair = 250
			failureTitle = Axis Control Locked (To Max)
			severity = minor
			weight = 4
			failureType = mechanical
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#dockingPortFailures]]:FOR[zTestFlight]
{
	MODULE
	{
		name = FlightDataRecorder
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$
			flightDataMultiplier = #$/TESTFLIGHT,0/reliabilityDataRateMultiplier$
			flightDataEngineerModifier = #$/TESTFLIGHT,0/reliabilityDataEngineerModifier$
        }
	}
	
	MODULE
	{
		name = TestFlightFailure_DockingClamp
		configVersion = 2
		
		CONFIG
		{
			configuration = #$../TESTFLIGHT,0/name$

			duFail = 50
			failureTitle = Unsuccessful Dock
			severity = minor
			weight = 8
			failureType = mechanical
		}
	}
	
	MODULE
	{
		name = TestFlightFailure_DockingFeed
		configVersion = 2
		
		CONFIG
		{
			configuration = #$../TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = False
				canBeRepairedByRemote = False
				repairChance = 100
			}
			duFail = 100
			duRepair = 250
			failureTitle = Unaligned fuel lines
			severity = minor
			weight = 4
			failureType = mechanical
		}
	}
}

@PART[HeatShield0]:HAS[!MODULE[TestFlightInterop]]:BEFORE[zTestFlight]
{
    TESTFLIGHT
    {
        name = AHS-0.625m
        cycleReliabilityStart = 0.01
        cycleReliabilityEnd = 0.02
		ablationFailures = True
    }
}
