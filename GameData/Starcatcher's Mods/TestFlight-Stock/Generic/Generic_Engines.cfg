// To keep config clutter down, TF settings are abstracted into a TESTFLIGHT block.
// The syntax is as follows:
// TESTFLIGHT
// {
//		- - - REQUIRED - - -
//
//		name =								// Configuration name. MUST be unique to each part!
//		ratedBurnTime =						// Rated burn time of an engine, where it is most reliable. The engine is gauranteed to fail at 2.5x ratedBurnTime.
//		cycleReliabilityStart =				// Chance of running for RBT without failing at 0 DU
//		cycleReliabilityEnd =				// Chance of running for RBT at max DU
//
//
//
//		- - - FAILURE MODES - - -
//
//		Note: Since version 0.4 some failure modes are now automatically assigned to corresponding engines. If you want to specify exceptions, for example excluding solidFuelFailures from a certain solid rocket motor, as opposed to writing nothing you'll have to fill in 'solidFuelFailures = False' in the TESTFLIGHT block.
//
//		solidFuelFailures = True			- Solid fuel motors, automatically attached.
//		liquidFuelFailures = True			- Liquid fuel engines, automatically attached.
//		electrostaticFailures = True		- Electrostatic ion engines, manually attached.
//		electromagneticFailures = True		- Electromagnetic ion engines (e.g. Lorenz thrusters), manually attached.
//		electrothermalFailures = True		- Electrothermal ion engines (e.g. VASIMR, arcjets,...), manually attached.
//		turbineFailures = True				- Propellers and turbofans, manually attached.
//		electricFanFailures = True			- Purely electrical thrusters, automatically attached.
//		ramjetFailures = True				- Ramjets, manually attached.
//		turboRamjetFailures = True			- Turboramjets, manually attached.
//		nuclearRamjetFailures = True		- Nuclear thermal ramjets, manually attached.
//		integratedTankFailures = True		- Engines that comes with built-in fuel tanks (except solid propellant), automatically combined.
//		ignitionFailures = True				- For engines with ignition charges, automatically combined with corresponding modes.
//		coldGasThruster = True				- For non-chemical engines relying purely on pressure difference to operate, manually combined.
//
//		- - - OPTIONAL - - -
//
//		title =								- Part name to use in MFD. Defaults to full VAB name.
//		startDU =							- Minimum DU a part may have (default 0)
//		techTransfer =						- Other parts produce data for this one
//		reliabilityDataRateMultiplier =		- Data collection efficiency (default 1.0)
//		flightDataEngineerModifier =		- Data collection efficiency when engineers are on board  (default 0.25)
//		explicitDataRate = True				- Data rate multiplier recommended for long-burning engines.
//
//		thrustModifier	{}					- How will the engine react to throttle levels. Completely unrelated to failure modules, yet still implemented for some reason.
//
//		ignitionReliabilityStart =       	- Chance of ignition at 0 DU
//		ignitionReliabilityEnd =         	- Chance of ignition at max DU
//
//		ratedContinuousBurnTime =			- Same as ratedBurnTime, however if applied ratedContinuousBurnTime becomes the continuous burn time and ratedBurnTime switches to the culmulative burn time.
//		testedBurnTime =					- The amount of time the engine has been tested and proved to be running reliably. This allows the part to run past ratedBurnTime with minor reliability penalty.
//
//		engineID =							- For multi-mode engines, which mode this block is for
//		clusterMultiplier =					- Number of engines in this part (default 1)
//		ignitionDynPresFailMultiplier =		- Scales the dynamic pressure at which the igniter starts to fail. By default reliability starts to drop at 5 kPa (90 m/s at Kerbin sea level), and falls below half the nominal value at 27 kPa (210 m/s).
//		additionalIgnitionFailureChance =	- Chance of ignition failure triggering other failure (default 0.2)
//
//		maxMach =							- Mach number at which engine performance degrades. Emulated using dynamic pressure for now.
//		maxAirTemp =						- Intake temperature at which engine performance degrades. Assumed to equal skin temperature.
//
//		mainConfiguration =					- Override for configurable engines.
//		reliabilityMidH =					- Midpoint data value.
//		reliabilityMidV =					- Fraction of total reliability progress made at midH. Default 0.75.
//		reliabilityMidTangentWeight =		- Smoothness of the reliability curve. Default 0.5.
// }
//
//------------------------------------------------------------------
// Handle TF interop

@PART[*]:HAS[@TESTFLIGHT,@MODULE[TestFlightInterop]]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight] { !TESTFLIGHT,* {} }

@PART[*]:HAS[@TESTFLIGHT,!MODULE[TestFlightInterop]]:FOR[zTestFlight]:NEEDS[!TestLite,TestFlight] { MODULE { name = TestFlightInterop } }

//------------------------------------------------------------------
// Force-set failure modes to correspoding engine types.

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleEngines*]:HAS[!PROPELLANT[SolidFuel],!PROPELLANT[IntakeAir]]]:FOR[zTestFlight] { @TESTFLIGHT { &liquidFuelFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleEngines*],@RESOURCE[#maxAmount[0]],!RESOURCE[SolidFuel]]:FOR[zTestFlight] 
{
	@TESTFLIGHT
	{
		&integratedTankFailures = True
	}
}

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleEngines*]:HAS[@PROPELLANT[SolidFuel]]]:FOR[zTestFlight] { @TESTFLIGHT { &solidFuelFailures = True } }

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleEngines*]]:FOR[zTestFlight] { @TESTFLIGHT { &ignitionFailures = True } }

//------------------------------------------------------------------
// Preprocessing

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleEngines*]]:FOR[zTestFlight]
{
	// Default values
	@TESTFLIGHT,*
	{
		&name = #$../name$
		&title = #$name$
        temp = #$../name$
        @temp ^= :_:-:
		&startDU = 0

		&mainConfiguration = #kspPartName = $temp$:$name$

		&reliabilityMidV = 0.75
		&reliabilityMidH = 0.4
		&reliabilityMidTangentWeight = 0.5

		&engineID = all

		&clusterMultiplier = 1.0

		&reliabilityDataRateMultiplier = 1.0
		
		&flightDataEngineerModifier = 0.25
		
		&additionalIgnitionFailureChance = 0.2

		&techTransfer =

		&restartWindowPenalty
		{
			key = 0 1
			key = 1 1
		}
		
		&thrustModifier
		{
			key = 0 1
			key = 1 1
		}

		&overburnPenalty = 2.0
	}

	@TESTFLIGHT,*
	{
		// Perform a transformation to decrease reliability
		// of ignitions on clusters. We do this for both start and end of curve.
		// Note that since reliability starts <= 1.0,
		// multiplying by -1 and then adding 1 gives us
		// the failure chance rather than the ignition chance.
		// With that we multiply the failure chance by the
		// cluster mult, then transform back.
		@ignitionReliabilityStart *= -1
		@ignitionReliabilityStart += 1
		@ignitionReliabilityStart *= #$clusterMultiplier$
		@ignitionReliabilityStart -= 1
		@ignitionReliabilityStart *= -1

		@ignitionReliabilityEnd *= -1
		@ignitionReliabilityEnd += 1
		@ignitionReliabilityEnd *= #$clusterMultiplier$
		@ignitionReliabilityEnd -= 1
		@ignitionReliabilityEnd *= -1

		// Now we do the same thing for cycle reliability.

		@cycleReliabilityStart *= -1
		@cycleReliabilityStart += 1
		@cycleReliabilityStart *= #$clusterMultiplier$
		@cycleReliabilityStart -= 1
		@cycleReliabilityStart *= -1

		@cycleReliabilityEnd *= -1
		@cycleReliabilityEnd += 1
		@cycleReliabilityEnd *= #$clusterMultiplier$
		@cycleReliabilityEnd -= 1
		@cycleReliabilityEnd *= -1

		// Multiply data rate by cluster multiplier.
		@reliabilityDataRateMultiplier *= #$clusterMultiplier$

		// Start creating our fail chance curve.
		// Again, transform from reliability to failure chance
		// so we can apply cluster mult.
		failChanceStart = #$cycleReliabilityStart$
		@failChanceStart *= -1
		@failChanceStart += 1
		@failChanceStart /= #$ratedBurnTime$
		failChanceEnd = #$cycleReliabilityEnd$
		@failChanceEnd *= -1
		@failChanceEnd += 1
		@failChanceEnd /= #$ratedBurnTime$

		reliabilityCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../failChanceStart$

			// Calculate kink time
			key20 = #$../reliabilityMidH$
			@key20 *= 5000
			@key20 += 1000

			// Calculate kink value
			key21 = #$../failChanceEnd$
			@key21 -= #$../failChanceStart$
			@key21 *= #$../reliabilityMidV$
			@key21 += #$../failChanceStart$

			// Calculate kink tangent
			key22 = #$../failChanceEnd$
			@key22 -= #$../failChanceStart$
			@key22 *= 0.0001
			@key22 *= #$../reliabilityMidTangentWeight$
			// now average it with the linear tangent to the endpoint
			key221 = #$../failChanceEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../reliabilityMidTangentWeight$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$

			// Create end key
			key30 = 10000
			key31 = #$../failChanceEnd$
			key32 = 0 // flat tangent

			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$

			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
			!key221 = DEL
			!key222 = DEL
		}

		baseIgnitionChance
		{
			// Create first key
			key10 = 0
			key11 = #$../ignitionReliabilityStart$

			// Calculate kink time
			key20 = #$../reliabilityMidH$
			@key20 *= 5000
			@key20 += 1000

			// Calculate kink value
			key21 = #$../ignitionReliabilityEnd$
			@key21 -= #$../ignitionReliabilityStart$
			@key21 *= #$../reliabilityMidV$
			@key21 += #$../ignitionReliabilityStart$

			// Calculate kink tangent
			// tangent = Y/X
			key22 = #$../ignitionReliabilityEnd$
			@key22 -= #$../ignitionReliabilityStart$
			@key22 *= 0.0001
			@key22 *= #$../reliabilityMidTangentWeight$
			// now average it with the linear tangent to the endpoint
			key221 = #$../ignitionReliabilityEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../reliabilityMidTangentWeight$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$

			// Create end key
			key30 = 10000
			key31 = #$../ignitionReliabilityEnd$
			key32 = 0 // flat intangent

			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$

			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key221 = DEL
			!key222 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
	}

	@TESTFLIGHT,*
	{
		cycle
		{
			// Failure rate at start of burn.
			key = 0.00 10.00
			key = 5.00 1.00 -0.8 0

			// 5 seconds of overburn for free.
			rbtCushioned = #$../ratedBurnTime$
			@rbtCushioned += 5
			key = #$rbtCushioned$ 1 0 0

			// Complete failure at 2.5x burn time.
			failTime = #$../ratedBurnTime$
			@failTime *= 2.5
			rbtToFailInterval = #$failTime$
			@rbtToFailInterval -= #$rbtCushioned$
			failInSlope = 292.8 // Magic number.
			@failInSlope /= #$rbtToFailInterval$

			key = #$failTime$ 100 $failInSlope$ 0

			// Cleanup.
			!rbtCushioned = DEL
			!failTime = DEL
			!rbtToFailInterval = DEL
			!failInSlope = DEL
		}
	}
	@TESTFLIGHT:HAS[#ratedContinuousBurnTime]
	{
		continuousCycle
		{
			// Failure rate at start of burn.
			key = 0.00 10.00
			key = 5.00 1.00 -0.8 0

			// 5 seconds of overburn for free.
			rcbtCushioned = #$../ratedContinuousBurnTime$
			@rcbtCushioned += 5
			key = #$rcbtCushioned$ 1 0 0

			// Complete failure at 2.5x burn time.
			failTime = #$../ratedContinuousBurnTime$
			@failTime *= 2.5
			rcbtToFailInterval = #$failTime$
			@rcbtToFailInterval -= #$rcbtCushioned$
			failInSlope = 292.8 // Magic number.
			@failInSlope /= #$rcbtToFailInterval$

			key = #$failTime$ 100 $failInSlope$ 0

			// Cleanup.
			!rcbtCushioned = DEL
			!failTime = DEL
			!rcbtToFailInterval = DEL
			!failInSlope = DEL
		}
	}
	@TESTFLIGHT:HAS[#testedBurnTime]
	{
		@cycle
		{
			// Remove the original full failure point.
			!key,3 = DEL

			// Curve has value `overburnPenalty` at tested burn time, transition smoothly.
			// No 5s cushion here.
			ratedToTestedInterval = #$../testedBurnTime$
			@ratedToTestedInterval -= #$key,2[0, ]$  // This key contains the cushioned rated burn time.
			// Compute the slope at the tested burn time. The curve is made to be differentiable
			// at this point, but the exact slope depends on the overburn penalty.
			tbtTransitionSlope = 3.135 // Magic number, for an overburn penalty of 2.
			@tbtTransitionSlope /= #$ratedToTestedInterval$
			tbtTransitionSlopeMult = #$../overburnPenalty$
			@tbtTransitionSlopeMult -= 1.0 // When overburn penalty is 1 the slope should be 0.
			@tbtTransitionSlope *= #$tbtTransitionSlopeMult$
			key = #$../testedBurnTime$ $../overburnPenalty$ $tbtTransitionSlope$ $tbtTransitionSlope$

			// Fail at 2.5x tested burn time.
			failTime = #$../testedBurnTime$
			@failTime *= 2.5
			tbtToFailInterval = #$failTime$
			@tbtToFailInterval -= #$../testedBurnTime$
			// Compute the in-tangent slope.
			failInSlope = 1.989  // Magic number.
			@failInSlope /= #$tbtToFailInterval$
			// The end point of this segment of the curve is always 100, but the start point
			// depends on the overburn penalty. Adjust accordingly.
			failInSlopeMult = 100
			@failInSlopeMult -= #$../overburnPenalty$
			@failInSlope *= #$failInSlopeMult$
			key = #$failTime$ 100 $failInSlope$ 0

			// Cleanup.
			!ratedToTestedInterval = DEL
			!tbtTransitionSlope = DEL
			!tbtTransitionSlopeMult = DEL
			!failTime = DEL
			!tbtToFailInterval = DEL
			!failInSlope = DEL
			!failInSlopeMult = DEL
		}
	}

	@TESTFLIGHT:HAS[~ratedContinuousBurnTime]
	{
		ratedContinuousBurnTime = #$ratedBurnTime$
		continuousCycle { key = 0 1 }
	}
	// If we are not setting an explicit data rate,
	// then we normalize it based on the burn time.
	@TESTFLIGHT:HAS[~explicitDataRate[?rue]]
	{
		@reliabilityDataRateMultiplier *= 640 // normalized to rate=4 at 160s burntime
		@reliabilityDataRateMultiplier /= #$ratedContinuousBurnTime$
	}
}

//------------------------------------------------------------------
// Adding TestFlight modules

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleEngines*]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightCore
		configVersion = 2

		CONFIG
		{
			title = #$/TESTFLIGHT,0/title$
			configuration = #$/TESTFLIGHT,0/mainConfiguration$
			!temp = DEL
			maxData = 10000

			startFlightData = #$/TESTFLIGHT,0/startDU$
			techTransfer = #$/TESTFLIGHT,0/techTransfer$
			// Most engine series have only 2-3 parts
			techTransferGenerationPenalty = 0.5

			// R&D parameters will be handled later
		}
	}

	MODULE
	{
		name = TestFlightReliability
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			#/TESTFLIGHT/reliabilityCurve {}
        }
	}

	MODULE
	{
		name = FlightDataRecorder_Engine
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			flightDataMultiplier = #$/TESTFLIGHT,0/reliabilityDataRateMultiplier$
			flightDataEngineerModifier = #$/TESTFLIGHT,0/flightDataEngineerModifier$
        }
	}

	MODULE
	{
		name = TestFlightReliability_EngineCycle
		configVersion = 2
		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$
			engineID = #$/TESTFLIGHT,0/engineID$
			ratedBurnTime = #$/TESTFLIGHT,0/ratedBurnTime$
			ratedContinuousBurnTime = #$/TESTFLIGHT,0/ratedContinuousBurnTime$
			#/TESTFLIGHT/cycle {}
			#/TESTFLIGHT/continuousCycle {}
			#/TESTFLIGHT/thrustModifier {}
		}
	}
	
	MODULE
	{
		name = TestFlightFailure_EnginePerformanceLoss
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$
			
			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
				repairChance = 100
			}

			duFail = 100
			weight = 16
			failureType = mechanical
			failureTitle = Performance Loss
			duRepair = 250
			severity = minor
			ispMultiplier = 0.5
			ispMultiplierJitter = 0.1
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#solidFuelFailures]]:FOR[zTestFlight] { @TESTFLIGHT,0 { &ignitionDynPresFailMultiplier = 0 } }

@PART[*]:HAS[@TESTFLIGHT:HAS[#liquidFuelFailures]]:FOR[zTestFlight] { @TESTFLIGHT,0 { &ignitionDynPresFailMultiplier = 1.0 } }

@PART[*]:HAS[@TESTFLIGHT:HAS[#ignitionFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightFailure_IgnitionFail
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$
			duFail = 300
			failureTitle = Start-up sequence failed
			severity = major
			failureType = mechanical
					
			baseIgnitionChance
			{
				// Create first key
				key10 = 0
				key11 = #$/TESTFLIGHT,0/ignitionReliabilityStart$
				// Calculate kink time
				key20 = #$/TESTFLIGHT,0/reliabilityMidH$
				@key20 *= 5000
				@key20 += 1000
				// Calculate kink value
				key21 = #$/TESTFLIGHT,0/ignitionReliabilityEnd$
				@key21 -= #$/TESTFLIGHT,0/ignitionReliabilityStart$
				@key21 *= #$/TESTFLIGHT,0/reliabilityMidV$
				@key21 += #$/TESTFLIGHT,0/ignitionReliabilityStart$
				// Calculate kink tangent
				// tangent = Y/X
				key22 = #$/TESTFLIGHT,0/ignitionReliabilityEnd$
				@key22 -= #$/TESTFLIGHT,0/ignitionReliabilityStart$
				@key22 *= 0.0001
				@key22 *= #$/TESTFLIGHT,0/reliabilityMidTangentWeight$
				// now average it with the linear tangent to the endpoint
				key221 = #$/TESTFLIGHT,0/ignitionReliabilityEnd$
				@key221 -= #$key21$
				key222 = 10000
				@key222 -= #$key20$
				@key221 /= #$key222$
				@key222 = #$/TESTFLIGHT,0/reliabilityMidTangentWeight$
				@key222 *= -1
				@key222 += 1
				@key221 *= #$key222$
				@key22 += #$key221$
				// Create end key
				key30 = 10000
				key31 = #$/TESTFLIGHT,0/ignitionReliabilityEnd$
				key32 = 0 // flat intangent
				// Create the keys
				key = #$key10$ $key11$
				key = #$key20$ $key21$ $key22$ $key22$
				key = #$key30$ $key31$ $key32$ $key32$
				// Clean up
				!key10 = DEL
				!key11 = DEL
				!key20 = DEL
				!key21 = DEL
				!key22 = DEL
				!key221 = DEL
				!key222 = DEL
				!key30 = DEL
				!key31 = DEL
				!key32 = DEL
			}

			pressureCurve
			{
				key = 0 1 0 0
			}
				
			// If fail mult is >0, set the other keys
			@pressureCurve:HAS[~ignitionDynPresFailMultiplier[0]]
			{
				key = 5000 1 0 0
				key = 15000 0.85 -2.25E-05 -2.25E-05
				key = 30000 0.4
				key = 50000 0.15 0 0
				@key,*[0, ] *= #$/TESTFLIGHT,0/ignitionDynPresFailMultiplier$
			}

			additionalFailureChance = #$/TESTFLIGHT,0/additionalIgnitionFailureChance$
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[~solidFuelFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightFailure_ShutdownEngine
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				dataSize = 1
				dataScale = 1
				repairChance = 100
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
			}
			duFail = 100
			weight = 32
			failureType = software
			failureTitle = Engine Shutdown
			duRepair = 50
			severity = major
		}
	}

	MODULE
	{
		name = TestFlightFailure_ReducedMaxThrust
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
				repairChance = 100
			}
			duFail = 100
			weight = 8
			failureType = mechanical
			failureTitle = Loss of Thrust
			duRepair = 250
			severity = minor
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[~solidFuelFailures[?rue],~ramjetFailures[?rue],~turboRamjetFailures[?rue],~nuclearRamjetFailures[?rue],~electromagneticFailures[?rue],~electrostaticFailures[?rue],~coldGasThruster[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightFailure_EngineCoolant
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
				repairChance = 100
			}
			duFail = 150
			weight = 4
			failureType = mechanical
			failureTitle = Engine Overheat
			duRepair = 200
			severity = minor
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[~ramjetFailures[?rue],~electromagneticFailures[?rue],~electrothermalFailures[?rue],~electrostaticFailures[?rue]]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightFailure_Explode
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			failureTitle = Explosion!
			duFail = 400
			weight = 2
			failureType = mechanical
			severity = major
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#integratedTankFailures]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightFailure_ResourcePump
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
				repairChance = 75
			}
			duFail = 100
			failureType = mechanical
			failureTitle = Tank Leaked
			duRepair = 50
			severity = minor
			weight = 8
		}
	}

	MODULE
	{
		name = TestFlightFailure_ResourceLeak
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
				repairChance = 75
			}
			duFail = 100
			failureType = mechanical
			failureTitle = Choked Pumping
			duRepair = 250
			severity = major
			weight = 2
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT,@MODULE[ModuleGimbal]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightFailure_GimbalCenter
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = True
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = True
				repairChance = 100
			}
			duFail = 150
			failureType = software
			failureTitle = Vectoring Glitch
			duRepair = 200
			severity = minor
			weight = 4
		}
	}

	MODULE
	{
		name = TestFlightFailure_GimbalSpeed
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			REPAIR
			{
				canBeRepairedInFlight = False
				canBeRepairedOnSplashed = True
				canBeRepairedByRemote = False
				repairChance = 100
			}
			duFail = 100
			failureType = mechanical
			failureTitle = Sluggish Vectoring
			duRepair = 250
			severity = minor
			weight = 8
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#maxMach]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightReliability_DynamicPressure
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			reliabilityAtPressure
			{
				maxPressure = 75530.658
				v2 = #$../../TESTFLIGHT,0/maxMach$
				@v2 != 2
				@maxPressure *= #$v2$

				key = 0.00 1.00 0 0
				key = #$maxPressure$ 1.00 0 0
				p15 = #$maxPressure$
				@p15 *= 1.5
				key = #$p15$ 100.0
				!maxPressure = DEL
				!v2 = DEL
				!p15 = DEL
			}
		}
	}
|

@PART[*]:HAS[@TESTFLIGHT:HAS[#maxAirTemp]]:FOR[zTestFlight]
{
	MODULE
	{
		name = TestFlightReliability_SkinTemperature
		configVersion = 2

		CONFIG
		{
			configuration = #$/TESTFLIGHT,0/name$

			temperatureCurve
			{
				key = 0.00 1.00 0 0
				tempDiff = #$../../maxTemp$
				@tempDiff -= #$../../TESTFLIGHT,0/maxAirTemp$
				tempBase = #$../../maxTemp$
				@tempBase -= #$tempDiff$
				@tempBase -= #$tempDiff$
				key = #$tempBase$ 1.0 0 0
				tempMid = #$../../TESTFLIGHT,0/maxAirTemp$
				slopeMid = 20.0
				@slopeMid /= #$tempDiff$
				key = #$tempMid$ 10.0 $slopeMid$ $slopeMid$
				key = #$../../maxTemp$ 100.0
				!tempBase = DEL
				!tempDiff = DEL
				!tempMid = DEL
				!slopeMid = DEL
			}
		}
	}
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#electrostaticFailures[?rue]]]:FOR[zTestFlight] 
{
	@MODULE[TestFlightFailure_EnginePerformanceLoss] { @CONFIG { @weight = 32 } }
	@MODULE[TestFlightFailure_ShutdownEngine] { @CONFIG { @weight = 16 } }
}

@PART[*]:HAS[@TESTFLIGHT:HAS[#electricFanFailures[?rue]]]:FOR[zTestFlight] { @MODULE[TestFlightFailure_EnginePerformanceLoss] { @CONFIG { @weight = 2 } } }

@PART[*]:HAS[@TESTFLIGHT:HAS[#electrothermalFailures[?rue]]]:FOR[zTestFlight] { @MODULE[TestFlightFailure_EnginePerformanceLoss] { @CONFIG { @weight = 16 } } }

@PART[*]:HAS[@TESTFLIGHT:HAS[#turbineFailures[?rue]]]:FOR[zTestFlight] { @MODULE[TestFlightFailure_EngineCoolant] { @CONFIG { @weight = 2 } } }

@PART[*]:HAS[@TESTFLIGHT:HAS[#electromagneticFailures[?rue]]]:FOR[zTestFlight] { @MODULE[TestFlightFailure_ShutdownEngine] { @CONFIG { @weight = 16 } } }

@PART[*]:HAS[@TESTFLIGHT:HAS[#nuclearRamjetFailures[?rue]]]:FOR[zTestFlight] { @MODULE[TestFlightFailure_Explode] { @CONFIG { @weight = 4 } } }

@PART[*]:HAS[@TESTFLIGHT]:FOR[zTestFlight] { @MODULE[TestFlightFailure*] { @CONFIG { engineID = #$/TESTFLIGHT,0/engineID$ } }
